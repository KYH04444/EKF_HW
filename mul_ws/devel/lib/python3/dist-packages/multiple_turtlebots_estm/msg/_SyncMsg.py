# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multiple_turtlebots_estm/SyncMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SyncMsg(genpy.Message):
  _md5sum = "e6952c1e230cf227605592ba046a70b4"
  _type = "multiple_turtlebots_estm/SyncMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
float64 odom_x
float64 odom_y
float64 odom_theta
float64 meas_rho
float64 meas_beta
float64 meas_theta
float64 delta_t
float64 gt_rho
float64 gt_beta
float64 gt_theta
float64 case0_x
float64 case0_y
float64 case0_t
float64 case1_x
float64 case1_y
float64 case1_t
float64 case2_x
float64 case2_y
float64 case2_t
float64 case3_x
float64 case3_y
float64 case3_t
float64 case4_x
float64 case4_y
float64 case4_t
float64 case4_vj
float64 case4_wj

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','odom_x','odom_y','odom_theta','meas_rho','meas_beta','meas_theta','delta_t','gt_rho','gt_beta','gt_theta','case0_x','case0_y','case0_t','case1_x','case1_y','case1_t','case2_x','case2_y','case2_t','case3_x','case3_y','case3_t','case4_x','case4_y','case4_t','case4_vj','case4_wj']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,odom_x,odom_y,odom_theta,meas_rho,meas_beta,meas_theta,delta_t,gt_rho,gt_beta,gt_theta,case0_x,case0_y,case0_t,case1_x,case1_y,case1_t,case2_x,case2_y,case2_t,case3_x,case3_y,case3_t,case4_x,case4_y,case4_t,case4_vj,case4_wj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SyncMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.odom_x is None:
        self.odom_x = 0.
      if self.odom_y is None:
        self.odom_y = 0.
      if self.odom_theta is None:
        self.odom_theta = 0.
      if self.meas_rho is None:
        self.meas_rho = 0.
      if self.meas_beta is None:
        self.meas_beta = 0.
      if self.meas_theta is None:
        self.meas_theta = 0.
      if self.delta_t is None:
        self.delta_t = 0.
      if self.gt_rho is None:
        self.gt_rho = 0.
      if self.gt_beta is None:
        self.gt_beta = 0.
      if self.gt_theta is None:
        self.gt_theta = 0.
      if self.case0_x is None:
        self.case0_x = 0.
      if self.case0_y is None:
        self.case0_y = 0.
      if self.case0_t is None:
        self.case0_t = 0.
      if self.case1_x is None:
        self.case1_x = 0.
      if self.case1_y is None:
        self.case1_y = 0.
      if self.case1_t is None:
        self.case1_t = 0.
      if self.case2_x is None:
        self.case2_x = 0.
      if self.case2_y is None:
        self.case2_y = 0.
      if self.case2_t is None:
        self.case2_t = 0.
      if self.case3_x is None:
        self.case3_x = 0.
      if self.case3_y is None:
        self.case3_y = 0.
      if self.case3_t is None:
        self.case3_t = 0.
      if self.case4_x is None:
        self.case4_x = 0.
      if self.case4_y is None:
        self.case4_y = 0.
      if self.case4_t is None:
        self.case4_t = 0.
      if self.case4_vj is None:
        self.case4_vj = 0.
      if self.case4_wj is None:
        self.case4_wj = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.odom_x = 0.
      self.odom_y = 0.
      self.odom_theta = 0.
      self.meas_rho = 0.
      self.meas_beta = 0.
      self.meas_theta = 0.
      self.delta_t = 0.
      self.gt_rho = 0.
      self.gt_beta = 0.
      self.gt_theta = 0.
      self.case0_x = 0.
      self.case0_y = 0.
      self.case0_t = 0.
      self.case1_x = 0.
      self.case1_y = 0.
      self.case1_t = 0.
      self.case2_x = 0.
      self.case2_y = 0.
      self.case2_t = 0.
      self.case3_x = 0.
      self.case3_y = 0.
      self.case3_t = 0.
      self.case4_x = 0.
      self.case4_y = 0.
      self.case4_t = 0.
      self.case4_vj = 0.
      self.case4_wj = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_27d().pack(_x.odom_x, _x.odom_y, _x.odom_theta, _x.meas_rho, _x.meas_beta, _x.meas_theta, _x.delta_t, _x.gt_rho, _x.gt_beta, _x.gt_theta, _x.case0_x, _x.case0_y, _x.case0_t, _x.case1_x, _x.case1_y, _x.case1_t, _x.case2_x, _x.case2_y, _x.case2_t, _x.case3_x, _x.case3_y, _x.case3_t, _x.case4_x, _x.case4_y, _x.case4_t, _x.case4_vj, _x.case4_wj))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 216
      (_x.odom_x, _x.odom_y, _x.odom_theta, _x.meas_rho, _x.meas_beta, _x.meas_theta, _x.delta_t, _x.gt_rho, _x.gt_beta, _x.gt_theta, _x.case0_x, _x.case0_y, _x.case0_t, _x.case1_x, _x.case1_y, _x.case1_t, _x.case2_x, _x.case2_y, _x.case2_t, _x.case3_x, _x.case3_y, _x.case3_t, _x.case4_x, _x.case4_y, _x.case4_t, _x.case4_vj, _x.case4_wj,) = _get_struct_27d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_27d().pack(_x.odom_x, _x.odom_y, _x.odom_theta, _x.meas_rho, _x.meas_beta, _x.meas_theta, _x.delta_t, _x.gt_rho, _x.gt_beta, _x.gt_theta, _x.case0_x, _x.case0_y, _x.case0_t, _x.case1_x, _x.case1_y, _x.case1_t, _x.case2_x, _x.case2_y, _x.case2_t, _x.case3_x, _x.case3_y, _x.case3_t, _x.case4_x, _x.case4_y, _x.case4_t, _x.case4_vj, _x.case4_wj))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 216
      (_x.odom_x, _x.odom_y, _x.odom_theta, _x.meas_rho, _x.meas_beta, _x.meas_theta, _x.delta_t, _x.gt_rho, _x.gt_beta, _x.gt_theta, _x.case0_x, _x.case0_y, _x.case0_t, _x.case1_x, _x.case1_y, _x.case1_t, _x.case2_x, _x.case2_y, _x.case2_t, _x.case3_x, _x.case3_y, _x.case3_t, _x.case4_x, _x.case4_y, _x.case4_t, _x.case4_vj, _x.case4_wj,) = _get_struct_27d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_27d = None
def _get_struct_27d():
    global _struct_27d
    if _struct_27d is None:
        _struct_27d = struct.Struct("<27d")
    return _struct_27d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
